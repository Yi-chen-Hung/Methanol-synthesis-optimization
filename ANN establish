# Artifical Neural Network 
#(ANN with 3 hidden layer, Multi-Layer Perceptron for regression, train/test sets, activation function: ReLU)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# =====================
# 1. Load data
# =====================
Target_df=df_new.drop(columns=['Time'])

# Define target columns
targets = ["Methanol selectivity %", "CO2 conversion rate %", "CO selectivity %"]

# Replace this with your 15 selected features after correlation filtering
selected_features = [
    # Example placeholder, replace with your actual 15 columns
    'BLOCKS("C1").Bpower',
 'BLOCKS("HX1").T_in',
 'BLOCKS("C2").Bpower',
 'BLOCKS("C2").Pout',
 'BLOCKS("FEHE").T_in_hot',
 'BLOCKS("FEHE").T_in_cold',
 'BLOCKS("FEHE").T_out_hot',
 'BLOCKS("FEHE").T_out_cold',
 'BLOCKS("FEHE").Q',
 'B6.Output_',
 'BLOCKS("REACTOR").P.Value(0)',
 'BLOCKS("REACTOR").P_out',
 'BLOCKS("SF-1").sf("VENT")',
 'BLOCKS("FL1").level'
    # ... add the rest until you have 15
]

X = Target_df[selected_features]
y = Target_df[targets]

# =====================
# 2. Train/Test split
# =====================
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# =====================
# 3. Scaling
# =====================
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# =====================
# 4. Build and Train MLPRegressor
# =====================
mlp = MLPRegressor(
    hidden_layer_sizes=(64, 32, 16),  # 3 hidden layers
    activation="relu",
    solver="adam",
    max_iter=2000,
    random_state=42,
    early_stopping=True
)

mlp.fit(X_train_scaled, y_train)

# =====================
# 5. Evaluate
# =====================
y_pred = mlp.predict(X_test_scaled)

for i, target in enumerate(targets):
    rmse = np.sqrt(mean_squared_error(y_test.iloc[:, i], y_pred[:, i]))
    r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
    print(f"{target}: RMSE={rmse:.3f}, RÂ²={r2:.3f}")

# =====================
# 6. Parity plots
# =====================
for i, target in enumerate(targets):
    plt.figure(figsize=(5,5))
    plt.scatter(y_test.iloc[:, i], y_pred[:, i], alpha=0.7)
    plt.plot([y_test.iloc[:, i].min(), y_test.iloc[:, i].max()],
             [y_test.iloc[:, i].min(), y_test.iloc[:, i].max()],
             'r--')
    plt.xlabel("Actual")
    plt.ylabel("Predicted")
    plt.title(f"Parity plot for {target}")
    plt.show()
